// swift-interface-format-version: 1.0
// swift-compiler-version: Swift version 5.9.2 (swift-5.9.2-RELEASE)
// swift-module-flags: -target x86_64-unknown-linux-gnu -disable-objc-interop -enable-library-evolution -swift-version 5 -O -module-name FrostflakeKit
// swift-module-flags-ignorable: -enable-experimental-feature AccessLevelOnImport -user-module-version 1.0
import Glibc
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
final public class Frostflake {
  final public var currentSeconds: Swift.UInt32
  final public var sequenceNumber: Swift.UInt32
  final public let generatorIdentifier: Swift.UInt16
  final public let forcedTimeRegenerationInterval: Swift.UInt32
  public static var sharedGenerator: FrostflakeKit.Frostflake {
    get
  }
  public static func setup(sharedGenerator: FrostflakeKit.Frostflake)
  public static func teardown()
  @inlinable @inline(__always) public static func generate() -> FrostflakeKit.FrostflakeIdentifier {
        sharedGenerator.generate()
    }
  public init(generatorIdentifier: Swift.UInt16, forcedTimeRegenerationInterval: Swift.UInt32 = defaultForcedTimeRegenerationInterval, concurrentAccess: Swift.Bool = true)
  final public func generate() -> FrostflakeKit.FrostflakeIdentifier
  deinit
}
public typealias FrostflakeIdentifier = Swift.UInt64
extension Swift.UInt64 {
  @inlinable @inline(__always) public init() {
        self = Frostflake.sharedGenerator.generate()
    }
}
extension FrostflakeKit.Frostflake {
  public static let secondsBits: Swift.Int
  public static let sequenceNumberBits: Swift.Int
  public static let generatorIdentifierBits: Swift.Int
  public static let validGeneratorIdentifierRange: Swift.Range<Swift.Int>
  public static let allowedSequenceNumberRange: Swift.Range<Swift.Int>
  public static let defaultManualGeneratorIdentifier: Swift.Int
  public static let defaultForcedTimeRegenerationInterval: Swift.UInt32
}
extension Swift.UInt64 {
  public func frostflakeDescription() -> Swift.String
}
@inline(never) public func blackHole(_: some Any)
